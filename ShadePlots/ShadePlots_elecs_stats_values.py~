from __future__ import division
import pandas as pd
import os
import numpy as np
import sys
import cPickle as pickle
import loadmat
import pdb
from scipy import stats

def shadeplots_elecs_stats():
    """ 
    calculates mean, max, min, latency, median, and std on the mean trace for trial for all electrodes in an active cluster
    uses electrodes and windows from PCA/Stats/single_electrode_windows_withdesignation_EDITED.csv
    calculates both stimulus and response locked parameters
    """

    SJdir = '/home/knight/matar/MATLAB/DATA/Avgusta/'

    filename = os.path.join(SJdir,'PCA', 'Stats', 'single_electrode_windows_csvs', 'single_electrode_windows_withdesignation_EDITED.csv')
    df = pd.read_csv(filename)

    for s_t in df.groupby(['subj','task']):

        subj, task = s_t[0]
        #load data
        filename = os.path.join(SJdir, 'Subjs', subj, task, 'HG_elecMTX_percent.mat') 
        data_dict = loadmat.loadmat(filename)

        active_elecs, Params, srate, RT, data_all = [data_dict.get(k) for k in ['active_elecs','Params','srate','RTs','data_percent']]
        data_all = data_all.mean(axis = 1) #mean across trials, (new shape is elecs x time)
        bl_st = Params['bl_st']
        bl_st = bl_st/1000*srate
        
        maxes_rel, medians, means, stds, maxes, lats, lats_pro, RTs, mins, lats_min = [dict() for i in range(13)]
        
        RT = RT + abs(bl_st) #RTs are calculated from stim onset, need to account for bl in HG_elecMTX_percent

        for row in s_t[1].itertuples():
            _, _, subj, task, cluster, pattern, elec, start_idx, end_idx, start_idx_resp, end_idx_resp, _, _ = row
            eidx = np.in1d(active_elecs, elec)
            data = data_all[eidx,:].squeeze()

            st_resp = 0

            #define start and end indices based on electrode type
            if any([(pattern == 'S'), (pattern == 'sustained'), (pattern == 'S+sustained'), (pattern == 'SR')]):
                start_idx = start_idx + abs(bl_st)
                end_idx = end_idx + abs(bl_st)
                if start_idx == end_idx:
                	continue #for SR elecs that dont' have stimlocked (CP9, e91)

            if pattern == 'R': #calculate based on mean RT
                start_idx = RT.mean() + start_idx_resp + abs(st_resp)
                end_idx = RT.mean() + end_idx_resp + abs(st_resp)

                if start_idx_resp == end_idx_resp:
                	continue  #for inactive R elecs (not clear why on spreadsheet)

            if pattern == 'D':
                start_idx = start_idx + abs(bl_st)
                end_idx = RT.mean() + end_idx_resp + abs(st_resp)


            #calculate stats (mean trace)
            means[elec] = data[start_idx:end_idx].mean(axis = 1)
            stds[elec] = data[start_idx:end_idx].std(axis = 1)
            maxes[elec] = data[start_idx:end_idx].max(axis = 1)
            lats[elec] = data[start_idx:end_idx].argmax(axis = 1)
            lats_min[elec] = data[start_idx:end_idx].argmin(axis = 1)
            medians[elec] = stats.nanmedian(data[start_idx:end_idx], axis = 1)
            maxes_rel[elec] = maxes[elec]-means[elec]
            mins[elec] = data[:,start_idx:end_idx].min(axis = 1)
            RTs[elec] = RT


        #save stats (mean traces)
        filename = os.path.join(SJdir, 'PCA', 'ShadePlots_hclust', 'elecs', 'significance_windows', 'smoothed', 'mean_traces', 'data', ''.join([subj, '_', task, '.p']))
        data_dict = {'active_elecs': active_elecs, 'means':means, 'stds':stds, 'maxes':maxes, 'lats':lats, 'srate': srate, 'bl_st':bl_st, 'RTs':RTs, 'maxes_rel' : maxes_rel, 'medians' : medians, 'mins': mins, 'lats_min':lats_min}
        
        with open(filename, 'w') as f:
            pickle.dump(data_dict, f)
            f.close()

        #update csv file
        for k in data_dict.keys():
            if k in ['bl_st', 'srate','active_elecs']:
                continue
            df = pd.DataFrame(data_dict[k])
            df_all.append(df)
       
    #save dataframe with values for all elecs
    filename = os.path.join(SJdir, 'PCA', 'ShadePlots_hclust', 'elecs', 'significance_windows', 'smoothed', 'mean_traces', 'mean_trace_values.csv'
    df.to_csv(filename, index = False)

       
if __name__ == '__main__':
    shadeplots_elecs_stats()
